1，见代码
2，
a:饿汉模式简单粗暴，占用空间，每次都需要new一个新对象，无所谓序列化，反射攻击，多线程安全也不需要考虑
b:懒汉模式，调用时才创造对象，节约空间，存在多线程安全问题(可以利用synchronized控制，最后方法内加锁，双重锁控制)，序列化会破坏此单例(重写readResolve方法)，反射破坏还没找到更好办法
c:注册模式，类似spring ioc注册，具体破坏没测试，线程安全存在问题，需要加锁
d:枚举模式 最安全，因为jdk做了一系列控制，亲儿子级别
3，破坏单例有序列化破坏和反射破坏
4，内部类只有用到时在会加载调用，较安全和性能优化